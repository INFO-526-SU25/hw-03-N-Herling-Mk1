---
title: "HW 03"
author: "Nathan Herling"
date: "2025-06-20"
_due: "Friday-June-13-2025"   
format:
  html:
    embed-resources: true
    code-fold: true
    code-tools: true
    toc: true
    css: styles.css       # ✅ Add this line to link your CSS file
---

```{r setup}
#--------------------->
#################
# Package Setup #
#################
#Check if pacman [package manager] is installed, if not install it.
#throw [FYI] alert either way.
if (!requireNamespace("pacman", quietly = TRUE)) {
  message("Installing 'pacman' (not found locally)...")
  install.packages("pacman")
} else {
  message("[FYI]\n'pacman' already installed — skipping install.")
}
# use this line for installing/loading
# pacman::p_load()
# - packages to load stored in a variable (vector)
pkgs <- c(
  "tidyverse",
  "glue",
  "scales",
  "lubridate",
  "patchwork",
  "ggh4x",
  "ggrepel",
  "openintro",
  "ggridges",
  "dsbox",
  "janitor",
  "here",
  "knitr",
  "ggthemes",
  "ggplot2",
  "kableExtra",
  "palmerpenguins",
  "grid",
  "htmltools",
  "plotly",
  "ggforce",
  "cowplot",
  "magick"
)

# - load from the character array/vector
pacman::p_load(char=pkgs)

# - install tidyverse/dsbox directly from Git Hub
# - this allows for the possible need to install on a repo. pull.
# - and, if it's already installed just thorw an alert.
if (!requireNamespace("dsbox", quietly = TRUE)) {
  message("Installing 'dsbox' from GitHub (not found locally)...")
  suppressMessages(devtools::install_github("tidyverse/dsbox"))
} else {
  message("[FYI]\n'dsbox' already installed — skipping GitHub install.")
}

# - alert to user packages loaded.
# Set number of columns (adjustable)
n_cols <- 4

# Add * to each package name
pkgs <- paste0("* ", pkgs)

# Calculate number of rows based on total packages
n_rows <- ceiling(length(pkgs) / n_cols)

# Pad with empty strings to complete grid
pkgs_padded <- c(pkgs, rep("", n_rows * n_cols - length(pkgs)))

# Create matrix (fill by row)
pkg_matrix <- matrix(pkgs_padded, nrow = n_rows, byrow = TRUE)

# Print header
cat("The packages loaded:")

# Loop and print each row (use invisible to suppress NULL)
invisible(apply(pkg_matrix, 1, function(row) {
  cat(paste(format(row, width = 22), collapse = ""), "\n")
}))
#-------------------------->
######################
# Basic set Theme up #
######################
# ---- set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
## ---- end theme set up
```


## 1 - Du Bois challenge.
<div class="question-box">
Du Bois challenge. Recreate the following visualization by W.E.B. Du Bois on family budgets split by income classes for 150 families in Atlanta, Georgia. This visualization was originally created using ink and watercolors.
</div>

```{r,fig.width=12, fig.height=8, out.width="95%"}
#| label: label-me-1

library(magick)

# Load the data
income_data <- read_csv("data/income.csv")

# --- New: Extract data for col_0, row_1..5 overlay table ---
library(dplyr)
library(scales)

table_data <- income_data |>
  select(Class, `Actual Average` = Average_Income) |>
  mutate(`Actual Average` = dollar(`Actual Average`))  # Format as US Dollars

# Add header row
header_row <- tibble(Class = "Class", `Actual Average` = "ACTUAL AVERAGE")
table_data <- bind_rows(header_row, table_data)

# --- Back to existing code ---

# Load parchment image
background_img <- image_read("images/parchment_sheet.png")

# Get image dimensions
info <- image_info(background_img)
img_width <- info$width
img_height <- info$height

# Margins and title height
margin <- 40
title_height <- 100
gap_below_title <- -50

# Create transparent canvas for the title text
title_canvas <- image_blank(width = img_width, height = title_height + margin, color = "none")

# Annotate the title
title_text <- "INCOME AND EXPENDITURE OF 150 NEGRO FAMILIES IN ATLANTA,GA.,USA."
title_layer <- image_annotate(
  title_canvas,
  text = title_text,
  size = 25,
  gravity = "north",
  location = "+0+40",
  font = "IM FELL English SC",
  weight = 700,
  color = "#000000BB"
)

title_layer <- image_blur(title_layer, radius = 0.5, sigma = 0.3)
composite_img <- image_composite(background_img, title_layer, offset = "+0+0")

# Compute usable space for grid below title
usable_width <- img_width - 2 * margin
usable_height <- img_height - margin - title_height
n_cols <- 6
n_rows <- 4
cell_width <- usable_width / n_cols
cell_height <- usable_height / n_rows

# Grid positions
grid_top <- margin + title_height + gap_below_title
grid_bottom <- img_height - margin
grid_left <- margin
grid_right <- img_width - margin

# Read and resize image to fit cell (0,0)
annual_income_img <- image_read("images/annual_income.png")
annual_income_img_resized <- image_scale(annual_income_img, geometry = paste0(cell_width, "x", cell_height, "!"))
x_pos <- grid_left
y_pos <- grid_top
composite_img <- image_composite(composite_img, annual_income_img_resized, offset = paste0("+", x_pos, "+", y_pos))

# Add label with border across cols 1 to 5
span_x_left <- grid_left + cell_width * 1
span_x_right <- grid_left + cell_width * 6
span_width <- span_x_right - span_x_left

label_text <- image_blank(width = span_width, height = 50, color = "none")
label_text <- image_annotate(
  label_text,
  text = "ANNUAL EXPENDITURE FOR",
  size = 25,
  gravity = "center",
  font = "IM FELL English SC",
  weight = 0,
  color = "#000000BB"
)

label_trimmed <- image_trim(label_text)
label_padded <- image_extent(label_trimmed, geometry = paste0(span_width, "x", image_info(label_trimmed)$height), gravity = "center")
label_with_border <- image_border(label_padded, color = "black", geometry = "2x2")
label_height <- image_info(label_with_border)$height
label_y <- grid_top - label_height + 2
label_x <- span_x_left

composite_img <- image_composite(
  composite_img,
  label_with_border,
  offset = paste0("+", round(label_x), "+", round(label_y))
)

# Add column titles (RENT, FOOD, etc.)
top_col_titles <- c("RENT", "FOOD", "CLOTHES", "DIRECT TAXES", "OTHER EXPENSES AND SAVINGS")

title_height_area <- 15  # uniform height for all title boxes

for (i in 1:5) {
  title_x_left <- grid_left + (i * cell_width)
  title_width <- cell_width

  # Estimate font size to fit the column width
  max_text_width <- title_width - 10  # padding
  title_font_size <- 25
  title_box_temp <- image_blank(width = title_width, height = title_height_area, color = "none")

  repeat {
    title_test <- image_annotate(
      title_box_temp,
      text = top_col_titles[i],
      size = title_font_size,
      gravity = "center",
      font = "Broadway",
      weight = 0,
      color = "#000000BB"
    )
    if (image_info(title_test)$width <= max_text_width || title_font_size <= 9.5) break
    title_font_size <- title_font_size - 1
  }

  title_box <- image_blank(width = title_width, height = title_height_area, color = "none")
  title_annotated <- image_annotate(
    title_box,
    text = top_col_titles[i],
    size = title_font_size,
    gravity = "center",
    font = "IM FELL English SC",
    weight = 0,
    color = "#000000BB"
  )

  title_with_border <- image_border(title_annotated, color = "black", geometry = "2x2")

  title_y <- grid_top - title_height_area + 15
  title_x <- title_x_left

  composite_img <- image_composite(
    composite_img,
    title_with_border,
    offset = paste0("+", round(title_x), "+", round(title_y))
  )
}

# --- NEW: Add image icons below headers and above footers ---
images_col_headers <- c(
  "images/rent.jpg",
  "images/food.png",
  "images/clothes.png",
  "images/direct_taxes.png",
  "images/other_expenses_savings.png"
)

icon_height <- 132
icon_gap_top <- 3
icon_gap_bottom <- 3

for (i in 1:5) {
  icon_x_left <- grid_left + (i * cell_width)
  icon_width <- cell_width
  icon_y <- grid_top + title_height_area + icon_gap_top

  icon_img <- image_read(images_col_headers[i])
  icon_resized <- image_scale(icon_img, geometry = paste0(icon_width, "x", icon_height, "!"))
  icon_with_border <- image_border(icon_resized, color = "black", geometry = "2x2")

  composite_img <- image_composite(
    composite_img,
    icon_with_border,
    offset = paste0("+", round(icon_x_left), "+", round(icon_y))
  )
}

# --- Restore column footers with colors for columns 1 to 5 ---
c_palette <- c("#1B1B19",
               "#755D75",
               "#C18C7E",
               "#ab9f9d",
               "#d9e6e8"
)

footer_height_area <- title_height_area

for (i in 1:5) {
  footer_x_left <- grid_left + (i * cell_width)
  footer_width <- cell_width

  footer_box <- image_blank(width = footer_width, height = footer_height_area, color = c_palette[i])
  footer_with_border <- image_border(footer_box, color = "black", geometry = "2x2")

  footer_y <- grid_top + cell_height - footer_height_area - 4
  footer_x <- footer_x_left

  composite_img <- image_composite(
    composite_img,
    footer_with_border,
    offset = paste0("+", round(footer_x), "+", round(footer_y))
  )
}
#============== LEFT COLUMN TABLE ==================================>>>
# --- NEW: Render table in col_0, rows 0 to 6 (header + 6 rows) ---
# --- UPDATED: Render table spanning from row_1 to row_5 (entire vertical height of 4 grid rows) ---
library(stringr)  # make sure stringr is loaded

cell_x <- grid_left
num_rows <- nrow(table_data)

table_top_y <- grid_top + cell_height      # start at row_1 - manually adjust height(s)
table_total_height <- 4 * cell_height       # span rows 1 to 5 (4 grid rows)

header_row_height <- 20                      # smaller height for header
data_rows_height <- table_total_height - header_row_height
data_row_height <- data_rows_height / (num_rows - 1)  - 25 # divide remaining height among data rows

col_width <- cell_width / 2

# Render header row first (index 0)
row_y <- table_top_y

# Class header cell with border
class_box <- image_blank(width = col_width, height = header_row_height, color = "none")
class_box <- image_annotate(
  class_box,
  text = table_data$Class[1],
  size = 9,
  gravity = "center",
  font = "IM FELL English SC",
  weight = 300,
  color = "#000000DD"
)
class_box_bordered <- image_border(class_box, color = "black", geometry = "1x1")

# Income header cell with border
income_box <- image_blank(width = col_width, height = header_row_height, color = "none")
income_box <- image_annotate(
  income_box,
  text = table_data$`Actual Average`[1],
  size = 8.5,
  gravity = "center",
  font = "IM FELL English SC",
  weight = 300,
  color = "#000000DD"
)
income_box_bordered <- image_border(income_box, color = "black", geometry = "1x1")

# Append side by side
combined_row <- image_append(c(class_box_bordered, income_box_bordered), stack = FALSE)

composite_img <- image_composite(
  composite_img,
  combined_row,
  offset = paste0("+", round(cell_x), "+", round(row_y))
)

# Render data rows (from i=1 to num_rows-1)
for (i in 1:(num_rows - 1)) {
  row_y <- table_top_y + header_row_height + ((i - 1) * data_row_height)

  if (i == (num_rows - 1)) {
    # Wrap with str_wrap, then replace spaces with \n to force line breaks
    wrapped_text <- str_wrap(table_data$Class[i + 1], width = 15)
    wrapped_text <- gsub(" ", "\n", wrapped_text)
    class_text <- wrapped_text
  } else {
    class_text <- table_data$Class[i + 1]
  }

  class_box <- image_blank(width = col_width, height = data_row_height, color = "none")
  class_box <- image_annotate(
    class_box,
    text = class_text,
    size = 14,
    gravity = "center",
    font = "IM FELL English SC",
    color = "#000000DD"
  )
  class_box_bordered <- image_border(class_box, color = "black", geometry = "1x1")

  income_box <- image_blank(width = col_width, height = data_row_height, color = "none")
  income_box <- image_annotate(
    income_box,
    text = table_data$`Actual Average`[i + 1],
    size = 14,
    gravity = "center",
    font = "IM FELL English SC",
    color = "#000000DD"
  )
  income_box_bordered <- image_border(income_box, color = "black", geometry = "1x1")

  combined_row <- image_append(c(class_box_bordered, income_box_bordered), stack = FALSE)

  composite_img <- image_composite(
    composite_img,
    combined_row,
    offset = paste0("+", round(cell_x), "+", round(row_y))
  )
}


#======================================>>>>
# Draw the grid
final_img <- image_draw(composite_img)

# for (i in 0:n_cols) {
#   x <- grid_left + i * cell_width
#   segments(x0 = x, y0 = grid_top, x1 = x, y1 = grid_bottom, col = "red", lwd = 2)
# }
# 
# for (j in 0:n_rows) {
#   y <- grid_top + j * cell_height
#   segments(x0 = grid_left, y0 = y, x1 = grid_right, y1 = y, col = "red", lwd = 2)
# }

dev.off()

print(final_img)
image_write(final_img, "parchment_grid_with_titles.png")


```

## 2 - COVID survey - interpret
<div class="question-box">
Q2 ....
</div>
```{r}
#| label: label-me-2

```

## 3 - COVID survey - reconstruct
<div class="question-box">
Q3 ....
</div>
```{r}
#| label: label-me-3

```

## 4 - COVID survey - re-reconstruct
<div class="question-box">
Q4 ....
</div>
```{r}
#| label: label-me-4

```

## 5 - COVID survey - another view
<div class="question-box">
Q5 ....
</div>
```{r}
#| label: label-me-5

```
